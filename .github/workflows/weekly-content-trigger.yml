name: Weekly Content Generation Trigger

on:
  schedule:
    # Runs every Monday at 9:15 AM UTC (15 minutes after Supabase cron as backup)
    - cron: '15 9 * * 1'
    # Backup trigger on Wednesday at 9:15 AM UTC
    - cron: '15 9 * * 3'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if content already exists for this week'
        required: false
        default: 'false'
        type: boolean

jobs:
  trigger-content-generation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Calculate week number
      id: week
      run: |
        # Calculate weeks since project start (adjust date as needed)
        project_start="2024-12-30"
        current_date=$(date +%Y-%m-%d)
        
        # Calculate difference in days and convert to weeks
        start_seconds=$(date -d "$project_start" +%s)
        current_seconds=$(date -d "$current_date" +%s)
        days_diff=$(( (current_seconds - start_seconds) / 86400 ))
        week_number=$(( days_diff / 7 + 1 ))
        
        echo "week_number=$week_number" >> $GITHUB_OUTPUT
        echo "üìÖ Current week number: $week_number"

    - name: Trigger Supabase Edge Function
      id: trigger
      run: |
        response=$(curl -s -w "\n%{http_code}" \
          -X POST \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{}' \
          "${{ secrets.SUPABASE_URL }}/functions/v1/weekly_scheduler")
        
        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n -1)
        
        echo "HTTP Status: $http_code"
        echo "Response: $body"
        
        if [ "$http_code" -eq 200 ]; then
          echo "‚úÖ Weekly content generation triggered successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to trigger weekly content generation"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "üö® Weekly content generation trigger failed!"
        echo "Week number: ${{ steps.week.outputs.week_number }}"
        echo "This requires manual intervention."
        
        # You can add Slack/Discord/email notifications here
        # Example with curl to a webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üö® Weekly content generation failed for week ${{ steps.week.outputs.week_number }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create issue on repeated failures
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          // Check if there's already an open issue for automation failures
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['automation-failure'],
            state: 'open'
          });

          if (issues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Weekly Content Generation Automation Failure - Week ${{ steps.week.outputs.week_number }}`,
              body: `
              ## Automation Failure Alert
              
              The weekly content generation automation has failed for week ${{ steps.week.outputs.week_number }}.
              
              **Failure Details:**
              - Trigger Date: ${new Date().toISOString()}
              - Week Number: ${{ steps.week.outputs.week_number }}
              - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              **Next Steps:**
              1. Check Supabase Edge Function logs
              2. Verify API credentials and permissions
              3. Manually trigger content generation if needed
              4. Fix underlying issue to prevent future failures
              
              **Manual Trigger Command:**
              \`\`\`bash
              curl -X POST \\
                -H "Authorization: Bearer YOUR_SUPABASE_ANON_KEY" \\
                -H "Content-Type: application/json" \\
                -d '{"action": "start_weekly_cycle", "week_number": ${{ steps.week.outputs.week_number }}}' \\
                "YOUR_SUPABASE_URL/functions/v1/orchestrate_weekly_cycle"
              \`\`\`
              `,
              labels: ['automation-failure', 'urgent']
            });
          }

  health-check:
    runs-on: ubuntu-latest
    needs: trigger-content-generation
    if: always()
    
    steps:
    - name: Check automation health
      run: |
        echo "üè• Running automation health check..."
        
        # This could query your database to check recent runs
        # For now, just log the status
        if [ "${{ needs.trigger-content-generation.result }}" == "success" ]; then
          echo "‚úÖ Weekly automation is healthy"
        else
          echo "‚ö†Ô∏è Weekly automation needs attention"
        fi
